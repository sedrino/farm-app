import { faker } from "@faker-js/faker";
import {
  and,
  arrayContained,
  arrayContains,
  arrayOverlaps,
  asc,
  between,
  desc,
  eq,
  exists,
  gt,
  gte,
  ilike,
  inArray,
  isNotNull,
  isNull,
  like,
  lt,
  lte,
  ne,
  not,
  notBetween,
  notIlike,
  notInArray,
  or,
  SQL,
  sql,
} from "drizzle-orm";

import { db } from "./connection";
import {
  Announcement,
  AnnouncementInsert,
  announcementRelations,
  AnnouncementResponse,
  AnnouncementResponseInsert,
  announcementResponseRelations,
  AnnouncementResponseUpdate,
  AnnouncementUpdate,
  AnnouncementView,
  AnnouncementViewInsert,
  announcementViewRelations,
  AnnouncementViewUpdate,
  AutomatedReport,
  AutomatedReportInsert,
  AutomatedReportUpdate,
  Barn,
  BarnInsert,
  BarnLayout,
  BarnLayoutInsert,
  BarnLayoutUpdate,
  barnRelations,
  BarnUpdate,
  BatchOperation,
  BatchOperationInsert,
  BatchOperationUpdate,
  BillingConfiguration,
  BillingConfigurationInsert,
  BillingConfigurationUpdate,
  Boarder,
  BoarderChangeLog,
  BoarderChangeLogInsert,
  boarderChangeLogRelations,
  BoarderChangeLogUpdate,
  BoarderDocument,
  BoarderDocumentInsert,
  boarderDocumentRelations,
  BoarderDocumentUpdate,
  BoarderInsert,
  boarderRelations,
  BoarderUpdate,
  BoardingContract,
  BoardingContractInsert,
  boardingContractRelations,
  BoardingContractUpdate,
  Budget,
  BudgetAdjustment,
  BudgetAdjustmentInsert,
  BudgetAdjustmentUpdate,
  BudgetAlert,
  BudgetAlertInsert,
  BudgetAlertUpdate,
  BudgetCategory,
  BudgetCategoryInsert,
  budgetCategoryRelations,
  BudgetCategoryUpdate,
  BudgetComparison,
  BudgetComparisonInsert,
  BudgetComparisonUpdate,
  BudgetExport,
  BudgetExportInsert,
  BudgetExportUpdate,
  BudgetInsert,
  budgetRelations,
  BudgetUpdate,
  BudgetVersion,
  BudgetVersionInsert,
  BudgetVersionUpdate,
  Contract,
  ContractAction,
  ContractActionInsert,
  ContractActionUpdate,
  ContractDocument,
  ContractDocumentInsert,
  contractDocumentRelations,
  ContractDocumentUpdate,
  ContractHistory,
  ContractHistoryInsert,
  ContractHistoryUpdate,
  ContractHorse,
  ContractHorseInsert,
  contractHorseRelations,
  ContractHorseUpdate,
  ContractInsert,
  ContractNote,
  ContractNoteInsert,
  contractNoteRelations,
  ContractNoteUpdate,
  contractRelations,
  ContractTemplate,
  ContractTemplateInsert,
  ContractTemplateUpdate,
  ContractUpdate,
  ContractVersion,
  ContractVersionInsert,
  ContractVersionUpdate,
  Conversation,
  ConversationInsert,
  ConversationParticipant,
  ConversationParticipantInsert,
  conversationParticipantRelations,
  ConversationParticipantUpdate,
  conversationRelations,
  ConversationUpdate,
  CustomReport,
  CustomReportInsert,
  customReportRelations,
  CustomReportUpdate,
  CustomTransactionCategory,
  CustomTransactionCategoryInsert,
  CustomTransactionCategoryUpdate,
  Event,
  EventInsert,
  EventParticipant,
  EventParticipantInsert,
  eventParticipantRelations,
  EventParticipantUpdate,
  eventRelations,
  EventUpdate,
  ExerciseGoal,
  ExerciseGoalInsert,
  ExerciseGoalUpdate,
  ExerciseLog,
  ExerciseLogInsert,
  exerciseLogRelations,
  ExerciseLogUpdate,
  ExerciseReport,
  ExerciseReportInsert,
  ExerciseReportUpdate,
  ExerciseStats,
  ExerciseStatsInsert,
  ExerciseStatsUpdate,
  ExerciseType,
  ExerciseTypeInsert,
  exerciseTypeRelations,
  ExerciseTypeUpdate,
  Expense,
  ExpenseCategory,
  ExpenseCategoryInsert,
  expenseCategoryRelations,
  ExpenseCategoryUpdate,
  ExpenseInsert,
  expenseRelations,
  ExpenseUpdate,
  ExportHistory,
  ExportHistoryInsert,
  ExportHistoryUpdate,
  Facility,
  FacilityAvailability,
  FacilityAvailabilityInsert,
  FacilityAvailabilityUpdate,
  FacilityBooking,
  FacilityBookingInsert,
  facilityBookingRelations,
  FacilityBookingUpdate,
  FacilityChangeLog,
  FacilityChangeLogInsert,
  FacilityChangeLogUpdate,
  FacilityInsert,
  FacilityPhoto,
  FacilityPhotoInsert,
  FacilityPhotoUpdate,
  facilityRelations,
  FacilityUpdate,
  FeedingAlert,
  FeedingAlertInsert,
  feedingAlertRelations,
  FeedingAlertUpdate,
  FeedingChangeLog,
  FeedingChangeLogInsert,
  FeedingChangeLogUpdate,
  FeedingHistory,
  FeedingHistoryInsert,
  FeedingHistoryUpdate,
  FeedingSchedule,
  FeedingScheduleInsert,
  feedingScheduleRelations,
  FeedingScheduleUpdate,
  FeedInventory,
  FeedInventoryInsert,
  feedInventoryRelations,
  FeedInventoryUpdate,
  FeedType,
  FeedTypeInsert,
  feedTypeRelations,
  FeedTypeUpdate,
  FinancialReport,
  FinancialReportInsert,
  financialReportRelations,
  FinancialReportUpdate,
  Goals,
  GoalsInsert,
  goalsRelations,
  GoalsUpdate,
  HealthRecord,
  HealthRecordInsert,
  healthRecordRelations,
  HealthRecordUpdate,
  HealthReminder,
  HealthReminderInsert,
  HealthReminderUpdate,
  Horse,
  HorseInsert,
  horseRelations,
  HorseUpdate,
  Income,
  IncomeCategory,
  IncomeCategoryInsert,
  incomeCategoryRelations,
  IncomeCategoryUpdate,
  IncomeInsert,
  incomeRelations,
  IncomeUpdate,
  InventoryCategory,
  InventoryCategoryInsert,
  InventoryCategoryUpdate,
  InventoryItem,
  InventoryItemCategoryChange,
  InventoryItemCategoryChangeInsert,
  InventoryItemCategoryChangeUpdate,
  InventoryItemInsert,
  inventoryItemRelations,
  InventoryItemUpdate,
  InventoryMaintenanceRequest,
  InventoryMaintenanceRequestInsert,
  InventoryMaintenanceRequestUpdate,
  InventoryTransaction,
  InventoryTransactionInsert,
  inventoryTransactionRelations,
  InventoryTransactionUpdate,
  Invoice,
  InvoiceInsert,
  invoiceRelations,
  InvoiceUpdate,
  MaintenanceCategory,
  MaintenanceCategoryInsert,
  MaintenanceCategoryUpdate,
  MaintenanceReport,
  MaintenanceReportInsert,
  MaintenanceReportUpdate,
  MaintenanceRequest,
  MaintenanceRequestInsert,
  maintenanceRequestRelations,
  MaintenanceRequestUpdate,
  MaintenanceTask,
  MaintenanceTaskInsert,
  maintenanceTaskRelations,
  MaintenanceTaskUpdate,
  Message,
  MessageAttachment,
  MessageAttachmentInsert,
  messageAttachmentRelations,
  MessageAttachmentUpdate,
  MessageInsert,
  messageRelations,
  MessageUpdate,
  Notification,
  NotificationInsert,
  notificationRelations,
  NotificationUpdate,
  Pasture,
  PastureActionLog,
  PastureActionLogInsert,
  PastureActionLogUpdate,
  PastureConditionLog,
  PastureConditionLogInsert,
  pastureConditionLogRelations,
  PastureConditionLogUpdate,
  PastureInsert,
  PastureMaintenance,
  PastureMaintenanceInsert,
  PastureMaintenanceUpdate,
  pastureRelations,
  PastureRotation,
  PastureRotationInsert,
  PastureRotationPlan,
  PastureRotationPlanDetail,
  PastureRotationPlanDetailInsert,
  PastureRotationPlanDetailUpdate,
  PastureRotationPlanInsert,
  PastureRotationPlanUpdate,
  pastureRotationRelations,
  PastureRotationUpdate,
  PastureUpdate,
  Payment,
  PaymentInsert,
  paymentRelations,
  PaymentUpdate,
  RelatedItem,
  RelatedItemInsert,
  relatedItemRelations,
  RelatedItemUpdate,
  ReorderHistory,
  ReorderHistoryInsert,
  ReorderHistoryUpdate,
  ReportConfiguration,
  ReportConfigurationInsert,
  reportConfigurationRelations,
  ReportConfigurationUpdate,
  ReportExport,
  ReportExportInsert,
  ReportExportUpdate,
  ReportTemplate,
  ReportTemplateInsert,
  ReportTemplateUpdate,
  SavedReport,
  SavedReportInsert,
  SavedReportUpdate,
  Schedule,
  ScheduleChangeLog,
  ScheduleChangeLogInsert,
  ScheduleChangeLogUpdate,
  ScheduledExercise,
  ScheduledExerciseInsert,
  scheduledExerciseRelations,
  ScheduledExerciseUpdate,
  ScheduledReport,
  ScheduledReportInsert,
  scheduledReportRelations,
  ScheduledReportUpdate,
  ScheduledVisit,
  ScheduledVisitInsert,
  ScheduledVisitUpdate,
  ScheduleInsert,
  ScheduleTemplate,
  ScheduleTemplateInsert,
  ScheduleTemplateUpdate,
  ScheduleUpdate,
  SearchIndex,
  SearchIndexInsert,
  SearchIndexUpdate,
  Shift,
  ShiftChangeRequest,
  ShiftChangeRequestInsert,
  ShiftChangeRequestUpdate,
  ShiftInsert,
  shiftRelations,
  ShiftUpdate,
  Staff,
  StaffInsert,
  staffRelations,
  StaffRole,
  StaffRoleInsert,
  StaffRoleUpdate,
  StaffSchedule,
  StaffScheduleInsert,
  staffScheduleRelations,
  StaffScheduleUpdate,
  StaffUpdate,
  Stall,
  StallActivity,
  StallActivityInsert,
  StallActivityUpdate,
  StallAssignment,
  StallAssignmentInsert,
  StallAssignmentUpdate,
  StallCustomization,
  StallCustomizationInsert,
  stallCustomizationRelations,
  StallCustomizationUpdate,
  StallInsert,
  StallOccupancy,
  StallOccupancyInsert,
  stallOccupancyRelations,
  StallOccupancyUpdate,
  stallRelations,
  StallReport,
  StallReportInsert,
  StallReportUpdate,
  StallUpdate,
  Supplier,
  SupplierInsert,
  SupplierOrder,
  SupplierOrderInsert,
  SupplierOrderUpdate,
  SupplierUpdate,
  tableAnnouncement,
  tableAnnouncementResponse,
  tableAnnouncementView,
  tableAutomatedReport,
  tableBarn,
  tableBarnLayout,
  tableBatchOperation,
  tableBillingConfiguration,
  tableBoarder,
  tableBoarderChangeLog,
  tableBoarderDocument,
  tableBoardingContract,
  tableBudget,
  tableBudgetAdjustment,
  tableBudgetAlert,
  tableBudgetCategory,
  tableBudgetComparison,
  tableBudgetExport,
  tableBudgetVersion,
  tableContract,
  tableContractAction,
  tableContractDocument,
  tableContractHistory,
  tableContractHorse,
  tableContractNote,
  tableContractTemplate,
  tableContractVersion,
  tableConversation,
  tableConversationParticipant,
  tableCustomReport,
  tableCustomTransactionCategory,
  tableEvent,
  tableEventParticipant,
  tableExerciseGoal,
  tableExerciseLog,
  tableExerciseReport,
  tableExerciseStats,
  tableExerciseType,
  tableExpense,
  tableExpenseCategory,
  tableExportHistory,
  tableFacility,
  tableFacilityAvailability,
  tableFacilityBooking,
  tableFacilityChangeLog,
  tableFacilityPhoto,
  tableFeedingAlert,
  tableFeedingChangeLog,
  tableFeedingHistory,
  tableFeedingSchedule,
  tableFeedInventory,
  tableFeedType,
  tableFinancialReport,
  tableGoals,
  tableHealthRecord,
  tableHealthReminder,
  tableHorse,
  tableIncome,
  tableIncomeCategory,
  tableInventoryCategory,
  tableInventoryItem,
  tableInventoryItemCategoryChange,
  tableInventoryMaintenanceRequest,
  tableInventoryTransaction,
  tableInvoice,
  tableMaintenanceCategory,
  tableMaintenanceReport,
  tableMaintenanceRequest,
  tableMaintenanceTask,
  tableMessage,
  tableMessageAttachment,
  tableNotification,
  tablePasture,
  tablePastureActionLog,
  tablePastureConditionLog,
  tablePastureMaintenance,
  tablePastureRotation,
  tablePastureRotationPlan,
  tablePastureRotationPlanDetail,
  tablePayment,
  tableRelatedItem,
  tableReorderHistory,
  tableReportConfiguration,
  tableReportExport,
  tableReportTemplate,
  tableSavedReport,
  tableSchedule,
  tableScheduleChangeLog,
  tableScheduledExercise,
  tableScheduledReport,
  tableScheduledVisit,
  tableScheduleTemplate,
  tableSearchIndex,
  tableShift,
  tableShiftChangeRequest,
  tableStaff,
  tableStaffRole,
  tableStaffSchedule,
  tableStall,
  tableStallActivity,
  tableStallAssignment,
  tableStallCustomization,
  tableStallOccupancy,
  tableStallReport,
  tableSupplier,
  tableSupplierOrder,
  tableTimeOffRequest,
  tableTrainer,
  tableTransaction,
  tableUser,
  tableVetNote,
  tableVisit,
  tableVisitor,
  tableVisitorDocument,
  tableVisitorType,
  TimeOffRequest,
  TimeOffRequestInsert,
  TimeOffRequestUpdate,
  Trainer,
  TrainerInsert,
  trainerRelations,
  TrainerUpdate,
  Transaction,
  TransactionInsert,
  transactionRelations,
  TransactionUpdate,
  User,
  UserInsert,
  userRelations,
  UserUpdate,
  VetNote,
  VetNoteInsert,
  VetNoteUpdate,
  Visit,
  VisitInsert,
  Visitor,
  VisitorDocument,
  VisitorDocumentInsert,
  visitorDocumentRelations,
  VisitorDocumentUpdate,
  VisitorInsert,
  visitorRelations,
  VisitorType,
  VisitorTypeInsert,
  VisitorTypeUpdate,
  VisitorUpdate,
  visitRelations,
  VisitUpdate,
} from "./schema";

async function seedDatabase() {
  // Seed Users
  const users: UserInsert[] = Array.from({ length: 50 }, () => ({
    userId: `u-${faker.string.uuid()}`,
    username: faker.internet.userName(),
    email: faker.internet.email(),
    passwordHash: faker.internet.password(),
    isActive: faker.datatype.boolean(),
    role: faker.helpers.arrayElement(["admin", "staff", "boarder", "trainer"]),
    lastLogin: faker.date.recent(),
    isTrainer: faker.datatype.boolean(),
    isStaff: faker.datatype.boolean(),
  }));

  const insertedUsers = await db.insert(tableUser).values(users).returning();

  // Seed Horses
  const horses: HorseInsert[] = Array.from({ length: 100 }, () => ({
    horseId: `h-${faker.string.uuid()}`,
    name: faker.animal.horse(),
    breed: faker.animal.horse(),
    dateOfBirth: faker.date.past(),
    gender: faker.helpers.arrayElement(["male", "female"]),
    color: faker.color.human(),
    markings: faker.lorem.sentence(),
    height: faker.number.int({ min: 120, max: 180 }),
    weight: faker.number.int({ min: 300, max: 600 }),
    microchipNumber: faker.string.alphanumeric(15),
    ownerId: faker.helpers.arrayElement(insertedUsers).userId,
    specialNeeds: faker.lorem.sentence(),
    medicalHistory: faker.lorem.paragraph(),
    feedingPreferences: faker.lorem.sentence(),
    exercisePreferences: faker.lorem.sentence(),
    profilePicture: faker.image.url(),
    knownConditions: faker.lorem.words(),
    allergies: faker.lorem.words(),
    currentMedication: faker.lorem.sentence(),
    documents: JSON.stringify([
      faker.system.filePath(),
      faker.system.filePath(),
    ]),
    photos: JSON.stringify([faker.image.url(), faker.image.url()]),
    arrivalDate: faker.date.past(),
    lastViewed: faker.date.recent(),
    status: faker.helpers.arrayElement([
      "active",
      "inactive",
      "boarding",
      "training",
    ]),
  }));

  const insertedHorses = await db.insert(tableHorse).values(horses).returning();

  // Seed Boarders
  const boarders: BoarderInsert[] = Array.from({ length: 30 }, () => ({
    boarderId: `b-${faker.string.uuid()}`,
    userId: faker.helpers.arrayElement(insertedUsers).userId,
    emergencyContact: JSON.stringify({
      name: faker.person.fullName(),
      phone: faker.phone.number(),
      relationship: faker.lorem.word(),
    }),
    contractStatus: faker.helpers.arrayElement([
      "active",
      "pending",
      "expired",
    ]),
    billingInfo: JSON.stringify({
      cardType: faker.finance.creditCardIssuer(),
      cardNumber: faker.finance.creditCardNumber(),
      expirationDate: faker.date.future(),
    }),
    preferences: JSON.stringify({
      stallType: faker.helpers.arrayElement(["box", "standing", "group"]),
      feedingSchedule: faker.helpers.arrayElement([
        "morning",
        "evening",
        "twice-daily",
      ]),
    }),
    profilePicture: faker.image.avatar(),
    documents: JSON.stringify([
      faker.system.filePath(),
      faker.system.filePath(),
    ]),
    name: faker.person.fullName(),
    contactDetails: JSON.stringify({
      phone: faker.phone.number(),
      email: faker.internet.email(),
      address: faker.location.streetAddress(),
    }),
  }));

  const insertedBoarders = await db
    .insert(tableBoarder)
    .values(boarders)
    .returning();

  // Seed Stalls
  const stalls: StallInsert[] = Array.from({ length: 50 }, () => ({
    stallId: `s-${faker.string.uuid()}`,
    number: faker.string.numeric(3),
    size: faker.helpers.arrayElement(["small", "medium", "large"]),
    location: faker.helpers.arrayElement([
      "north barn",
      "south barn",
      "east barn",
      "west barn",
    ]),
    features: faker.lorem.words(),
    isAvailable: faker.datatype.boolean(),
    notes: faker.lorem.sentence(),
    lastMaintenanceDate: faker.date.recent(),
    xCoordinate: faker.number.int({ min: 1, max: 100 }),
    yCoordinate: faker.number.int({ min: 1, max: 100 }),
    lastCleaned: faker.date.recent(),
    nextScheduledMaintenance: faker.date.future(),
    customizations: faker.lorem.words(),
    status: faker.helpers.arrayElement([
      "occupied",
      "available",
      "maintenance",
    ]),
    barnSection: faker.helpers.arrayElement(["A", "B", "C", "D"]),
    currentAvailability: faker.helpers.arrayElement([
      "available",
      "occupied",
      "reserved",
    ]),
    lastModifiedBy: faker.helpers.arrayElement(insertedUsers).userId,
  }));

  const insertedStalls = await db.insert(tableStall).values(stalls).returning();

  // Update horses with stall assignments
  const horseStallUpdates = insertedHorses.map((horse, index) => ({
    horseId: horse.horseId,
    stallId: insertedStalls[index % insertedStalls.length].stallId,
  }));

  for await (const update of horseStallUpdates) {
    await db
      .update(tableHorse)
      .set(update)
      .where(eq(tableHorse.horseId, update.horseId));
  }

  // Seed Health Records
  const healthRecords: HealthRecordInsert[] = Array.from(
    { length: 200 },
    () => ({
      healthRecordId: `hr-${faker.string.uuid()}`,
      horseId: faker.helpers.arrayElement(insertedHorses).horseId,
      eventDate: faker.date.recent(),
      eventType: faker.helpers.arrayElement([
        "vaccination",
        "injury",
        "checkup",
        "medication",
      ]),
      description: faker.lorem.sentence(),
      veterinarian: faker.person.fullName(),
      medications: faker.lorem.words(),
      followUpRequired: faker.datatype.boolean(),
      followUpDate: faker.date.future(),
      documentUrl: faker.internet.url(),
      vaccinationDueDate: faker.date.future(),
      isOngoing: faker.datatype.boolean(),
    })
  );

  await db.insert(tableHealthRecord).values(healthRecords);

  // Seed Exercise Logs
  const exerciseLogs: ExerciseLogInsert[] = Array.from({ length: 300 }, () => ({
    exerciseLogId: `el-${faker.string.uuid()}`,
    horseId: faker.helpers.arrayElement(insertedHorses).horseId,
    date: faker.date.recent(),
    startTime: faker.date.recent(),
    endTime: faker.date.recent(),
    duration: faker.number.int({ min: 30, max: 120 }),
    type: faker.helpers.arrayElement([
      "riding",
      "lunging",
      "turnout",
      "training",
    ]),
    intensity: faker.helpers.arrayElement(["low", "medium", "high"]),
    trainer: faker.helpers.arrayElement(
      insertedUsers.filter((u) => u.isTrainer)
    ).userId,
    notes: faker.lorem.sentence(),
    performanceNotes: faker.lorem.paragraph(),
    goals: faker.lorem.sentence(),
    achievements: faker.lorem.sentence(),
    horseBehavior: faker.lorem.sentence(),
    areasForImprovement: faker.lorem.sentence(),
    mediaUrls: JSON.stringify([faker.image.url(), faker.image.url()]),
    summary: faker.lorem.paragraph(),
  }));

  await db.insert(tableExerciseLog).values(exerciseLogs);

  // More seed data for other tables can be added here...
}

seedDatabase().catch(console.error);
